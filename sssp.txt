def bfs_shortest_path(graph, start):
    queue = [start]  # Queue to store vertices to visit
    distances = {start: 0}  # Dictionary to store the distances from the start vertex

    while queue:
        vertex = queue.pop(0)

        for neighbor in graph[vertex]:
            if neighbor not in distances:
                distances[neighbor] = distances[vertex] + 1
                queue.append(neighbor)

    return distances


graph = {}

num_edges = int(input("Enter the number of edges: "))

for i in range(num_edges):
    print("\nFor Edge", i + 1)
    src = input("Enter start vertex: ")
    dest = input("Enter end vertex: ")

    # Add vertices to the graph if they don't exist
    if src not in graph:
        graph[src] = []
    if dest not in graph:
        graph[dest] = []

    graph[src].append(dest)
    graph[dest].append(src)

start_vertex = input("Enter the start vertex: ")

shortest_distances = bfs_shortest_path(graph, start_vertex)

print("Shortest distances from vertex", start_vertex)
for vertex, distance in shortest_distances.items():
    print(vertex, ":", distance)

"""
Enter the number of edges: 6

For Edge 1
Enter start vertex: A
Enter end vertex: B

For Edge 2
Enter start vertex: B
Enter end vertex: C

For Edge 3
Enter start vertex: C
Enter end vertex: D

For Edge 4
Enter start vertex: D
Enter end vertex: A

For Edge 5
Enter start vertex: B
Enter end vertex: D

For Edge 6
Enter start vertex: A
Enter end vertex: C

Enter the start vertex: A
Shortest distances from vertex A
A : 0
B : 1
C : 1
D : 2

"""
"""
This code implements the Breadth-First Search (BFS) algorithm to find the shortest paths from a given start vertex to all other vertices in an unweighted graph. 

Breadth-First Search (BFS):
BFS is a graph traversal algorithm that systematically explores all the vertices and edges of a graph starting from a specified vertex. It visits the vertices in layers, exploring all neighbors of a vertex before moving on to the next layer.

Components of the Code:
bfs_shortest_path Function:
It takes the graph (graph representation) and start (start vertex) as inputs.
It initializes a queue to store vertices to visit and a dictionary distances to store the shortest distances from the start vertex.
It iteratively explores vertices using BFS and updates the distances from the start vertex to each vertex.
It returns the dictionary containing the shortest distances from the start vertex to all other vertices.
Graph Representation:
The graph dictionary represents the graph, where keys are vertices, and values are lists of adjacent vertices.
User Input:
The code prompts the user to input the number of edges and details for each edge (start vertex and end vertex).
It constructs the graph based on the user input.
Main Logic:
The code applies BFS to find the shortest paths from the specified start vertex to all other vertices in the graph.
It prints the shortest distances for each vertex from the start vertex.

"""

