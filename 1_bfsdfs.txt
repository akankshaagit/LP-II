def bfs(visited, graph, node):
    visited.append(node)
    queudef dfs(visited, graph, node):
    visited.append(node)
    print(node, end=' ')

    for neighbour in graph[node]:
        if neighbour not in visited:
            dfs(visited, graph, neighbour)

def create_graph():
    graph = {}
    nodes = int(input("Enter the number of nodes in the graph: "))

    for i in range(nodes):
        node = str(i)
        neighbours = input(f"Enter neighbours for node {node} (separated by space, or leave blank for no neighbours): ").split()
        graph[node] = neighbours

    return graph

print("Create your graph:")
graph = create_graph()

start_node = input("Enter the starting node for DFS traversal: ")

visited = []
print("DFS traversal:")
dfs(visited, graph, start_node)
print()
e = [node]

    while queue:
        m = queue.pop(0)
        print(m, end=' ')
        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)

def create_graph():
    graph = {}
    nodes = int(input("Enter the number of nodes in the graph: "))

    for i in range(nodes):
        node = str(i)
        neighbours = input(f"Enter neighbours for node {node} (separated by space, or leave blank for no neighbours): ").split()
        graph[node] = neighbours

    return graph

print("Create your graph:")
graph = create_graph()

start_node = input("Enter the starting node for BFS traversal: ")
    
visited = []
print("BFS traversal:")
bfs(visited, graph, start_node)
print()



def dfs(visited, graph, node):
    visited.append(node)
    print(node, end=' ')

    for neighbour in graph[node]:
        if neighbour not in visited:
            dfs(visited, graph, neighbour)

def create_graph():
    graph = {}
    nodes = int(input("Enter the number of nodes in the graph: "))

    for i in range(nodes):
        node = str(i)
        neighbours = input(f"Enter neighbours for node {node} (separated by space, or leave blank for no neighbours): ").split()
        graph[node] = neighbours

    return graph

print("Create your graph:")
graph = create_graph()

start_node = input("Enter the starting node for DFS traversal: ")

visited = []
print("DFS traversal:")
dfs(visited, graph, start_node)
print()
