class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, i, j):
        if i not in self.graph:
            self.graph[i] = []
        self.graph[i].append(j)

    def bfs(self, start, visited=None, queue=None, bfs_traversal=None):
        if visited is None:
            visited = set()
        if queue is None:
            queue = [start]
        if bfs_traversal is None:
            bfs_traversal = []

        if not queue:
            return bfs_traversal

        node = queue.pop(0)
        if node not in visited:
            bfs_traversal.append(node)
            visited.add(node)
            queue.extend(self.graph.get(node, []))
        return self.bfs(start, visited, queue, bfs_traversal)

    def dfs(self, start, visited=None, dfs_traversal=None):
        if visited is None:
            visited = set()
        if dfs_traversal is None:
            dfs_traversal = []

        if start not in visited:
            dfs_traversal.append(start)
            visited.add(start)
            neighbors = self.graph.get(start, [])
            for neighbor in neighbors:
                self.dfs(neighbor, visited, dfs_traversal)

        return dfs_traversal

# Taking input from the user to build the graph
num_vertices = int(input("Enter the number of vertices: "))
graph = Graph()

for _ in range(num_vertices):
    i, j = map(int, input("Enter an edge: ").split())
    graph.add_edge(i,j)

start_node = int(input("Enter the starting node: "))

print("BFS Traversal:", graph.bfs(start_node))
print("DFS Traversal:", graph.dfs(start_node))

"""
Enter the number of vertices: 4
Enter an edge: 0 1
Enter an edge: 0 2
Enter an edge: 2 4
Enter an edge: 0 3
Enter the starting node: 0
BFS Traversal: [0, 1, 2, 3, 4]
DFS Traversal: [0, 1, 2, 4, 3]
"""

"""
1.what is bfs?
Breadth-first search (BFS) is a fundamental algorithm used for traversing or searching tree or graph data structures. It systematically explores all the neighbor nodes at the current depth level before moving on to the nodes at the next depth level.
Start: Begin with a queue data structure and enqueue the starting node.
Dequeue: Dequeue a node from the queue and mark it as visited.
Explore Neighbors: Enqueue all of its adjacent nodes (neighbors) that have not been visited yet.
Repeat: Repeat steps 2 and 3 until the queue is empty.

2.what is dfs?
Depth-First Search (DFS)
Initialization: Begin with a stack (or recursion) and push the starting node onto the stack (or call the function with the starting node if using recursion).
Exploration: Pop a node from the stack (or process the current node if using recursion). Then, recursively explore each unvisited neighbor of the current node (or push each unvisited neighbor onto the stack).
Repeat: Repeat step 2 until there are no unvisited nodes remaining. If using a stack, this continues until the stack becomes empty.
Termination: The process terminates when there are no unvisited nodes left.

3.Graph class:
it represents a graph using an adjacency list.
It has methods to add edges, perform BFS, and perform DFS.
add_edge(self, u, v):
Adds an edge between vertices u and v.
bfs(self, start, visited=None, queue=None, bfs_traversal=None):
Performs Breadth-First Search traversal starting from the given start node.
It is implemented recursively. The function arguments visited, queue, and bfs_traversal are used to keep track of visited nodes, the queue for BFS traversal, and the resulting traversal respectively.
dfs(self, start, visited=None, dfs_traversal=None):
Performs Depth-First Search traversal starting from the given start node.
It is implemented recursively. The function arguments visited and dfs_traversal are used to keep track of visited nodes and the resulting traversal respectively.

"""