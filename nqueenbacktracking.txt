def isSafe(board, row, col, N):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper left diagonal
    i = row - 1
    j = col - 1
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1

    # Check upper right diagonal
    i = row - 1
    j = col + 1
    while i >= 0 and j < N:
        if board[i][j] == 1:
            return False
        i -= 1
        j += 1

    return True


def solveNQueen(board, row, N, count):
    if row == N:
        # All queens have been placed, solution found
        count[0] += 1
        print("Solution", count[0], ":")
        for i in range(N):
            for j in range(N):
                print(board[i][j], end=" ")
            print()
        print()
        return

    for col in range(N):
        if isSafe(board, row, col, N):
            # Place queen at board[row][col]
            board[row][col] = 1

            # Recursively solve for next row
            solveNQueen(board, row + 1, N, count)

            # Backtrack and remove the queen
            board[row][col] = 0


def main():
    N = int(input("Enter the number of queens: "))
    board = [[0] * N for i in range(N)]
    count = [0]

    solveNQueen(board, 0, N, count)

    print("Total solutions:", count[0])


main()


"""
Enter the number of queens: 4
Solution 1 :
0 1 0 0 
0 0 0 1 
1 0 0 0 
0 0 1 0 

Solution 2 :
0 0 1 0 
1 0 0 0 
0 0 0 1 
0 1 0 0 

Total solutions: 2

"""

"""
This Python program is used to solve the N-Queens problem using a recursive backtracking algorithm. The N-Queens problem is a classic problem in which the objective is to place N chess queens on an NxN chessboard so that no two queens threaten each other. In chess, a queen can move horizontally, vertically, and diagonally.

isSafe function:
This function checks whether it is safe to place a queen at position (row, col) on the board.
It checks three conditions:
Whether there is a queen in the same column.
Whether there is a queen in the upper left diagonal.
Whether there is a queen in the upper right diagonal.
If any of these conditions are violated, it returns False, indicating that it's not safe to place a queen at that position.
solveNQueen function:
This function recursively solves the N-Queens problem.
It takes parameters:
board: The current state of the chessboard.
row: The current row being considered.
N: The size of the chessboard.
count: A list to store the count of solutions found.
If row equals N, it means all queens have been successfully placed, and it prints the solution.
Otherwise, it iterates through each column in the current row and checks if it's safe to place a queen there.
If it's safe, it places the queen and recursively calls solveNQueen for the next row.
If no solution is found for the current configuration, it backtracks by removing the queen from the current position.
main function:
This function initializes the chessboard and invokes the solveNQueen function to find all solutions.
It takes the size of the chessboard N as input from the user.
It prints the total number of solutions found.
Output:
The program prints each solution found, representing the placement of queens on the chessboard.
At the end, it prints the total number of solutions found.

"""