def prims_algorithm(graph, start_vertex):
    visited = {start_vertex}
    minimum_spanning_tree = []
    edges = []

    while len(visited) < len(graph):
        for vertex in visited:
            for neighbor, weight in graph[vertex]:
                if neighbor not in visited:
                    edges.append((weight, vertex, neighbor))

        weight, src, dest = min(edges)
        edges.remove((weight, src, dest))

        if dest not in visited:
            visited.add(dest)
            minimum_spanning_tree.append((src, dest, weight))

    return minimum_spanning_tree


graph = {}

num_edges = int(input("Enter the number of edges: "))

for i in range(num_edges):
    print("\nFor Edge", i+1)

    src = input("Enter start vertex: ")
    dest = input("Enter end vertex: ")
    weight = int(input("Enter weight: "))

    # Add the edge to the graph
    if src in graph:
        graph[src].append((dest, weight))
    else:
        graph[src] = [(dest, weight)]
        
    if dest in graph:
        graph[dest].append((src, weight))
    else:
        graph[dest] = [(src, weight)]


start_vertex = input("Enter the starting vertex for finding Minimum Spanning Tree: ")

minimum_spanning_tree = prims_algorithm(graph, start_vertex)

total_cost = 0
for src, dest, weight in minimum_spanning_tree:
    total_cost += weight

print("\nMinimum Spanning Tree:")
for src, dest, weight in minimum_spanning_tree:
    print(src, "-->", dest, ": ", weight)

print("Total Cost:", total_cost)


"""
Enter the number of edges: 6

For Edge 1
Enter start vertex: A
Enter end vertex: B
Enter weight: 2

For Edge 2
Enter start vertex: B
Enter end vertex: C
Enter weight: 1

For Edge 3
Enter start vertex: C
Enter end vertex: D
Enter weight: 3

For Edge 4
Enter start vertex: D
Enter end vertex: A
Enter weight: 4

For Edge 5
Enter start vertex: B
Enter end vertex: D
Enter weight: 7

For Edge 6
Enter start vertex: A
Enter end vertex: D
Enter weight: 2
Enter the starting vertex for finding Minimum Spanning Tree: A

Minimum Spanning Tree:
A --> B :  2
B --> C :  1
A --> D :  2
Total Cost: 5
"""

"""
This code implements Prim's algorithm to find the minimum spanning tree (MST) of a given graph, starting from a specified vertex.

Prim's Algorithm:
Prim's algorithm is a greedy algorithm used to find the minimum spanning tree of a connected, undirected graph. It starts from an arbitrary vertex and grows the MST by adding the shortest edge that connects a vertex in the MST to a vertex outside the MST, until all vertices are included.

Components of the Code:
prims_algorithm Function:
It takes the graph (graph representation) and start_vertex (the vertex from which the MST is initiated) as inputs.
It initializes visited (set of visited vertices), minimum_spanning_tree (list to store the edges of the MST), and edges (list to store candidate edges).
It iteratively adds the shortest edge connecting a vertex in the MST to a vertex outside the MST until all vertices are visited.
It returns the minimum spanning tree.
Graph Representation:
The graph dictionary represents the graph, where keys are vertices, and values are lists of tuples (neighbor, weight) representing adjacent vertices and their corresponding edge weights.
User Input:
The code prompts the user to input the number of edges and details for each edge (start vertex, end vertex, and weight).
It constructs the graph based on the user input.
Minimum Spanning Tree Output:
The code computes and prints the minimum spanning tree along with the total cost.

•It is used in network cycles and rail tracks connecting all the cities
•Prim’s algorithm is used in laying cables of electrical wiring
Prim’s algorithm is used in gaming development and cognitive science
•Path finding algorithms in artificial intelligence and traveling salesman problems.

"""