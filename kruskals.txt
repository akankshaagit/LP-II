def find(parent, i):
    if parent[i] == i:
        return i
    return find(parent, parent[i])


def union(parent, rank, x, y):
    x_root = find(parent, x)
    y_root = find(parent, y)

    if rank[x_root] < rank[y_root]:
        parent[x_root] = y_root
    elif rank[x_root] > rank[y_root]:
        parent[y_root] = x_root
    else:
        parent[y_root] = x_root
        rank[x_root] += 1


def kruskals_algorithm(graph):
    minimum_spanning_tree = []
    edges = []

    for src in graph:
        for dest, weight in graph[src]:
            edges.append((weight, src, dest))

    edges.sort()

    parent = {}
    rank = {}

    for vertex in graph:
        parent[vertex] = vertex
        rank[vertex] = 0

    for edge in edges:
        weight, src, dest = edge

        src_root = find(parent, src)
        dest_root = find(parent, dest)

        if src_root != dest_root:
            minimum_spanning_tree.append((src, dest, weight))
            union(parent, rank, src_root, dest_root)

    return minimum_spanning_tree


graph = {}

num_edges = int(input("Enter the number of edges: "))

for i in range(num_edges):
    print("\nFor Edge", i+1)

    src = input("Enter start vertex: ")
    dest = input("Enter end vertex: ")
    weight = int(input("Enter weight: "))

    # Add the edge to the graph
    if src in graph:
        graph[src].append((dest, weight))
    else:
        graph[src] = [(dest, weight)]
        
    if dest in graph:
        graph[dest].append((src, weight))
    else:
        graph[dest] = [(src, weight)]

minimum_spanning_tree = kruskals_algorithm(graph)

total_cost = 0
for src, dest, weight in minimum_spanning_tree:
    total_cost += weight

print("\nMinimum Spanning Tree:")
for src, dest, weight in minimum_spanning_tree:
    print(src, "-->", dest, ": ", weight)

print("Total Cost:", total_cost)

"""
Enter the number of edges: 6

For Edge 1
Enter start vertex: A
Enter end vertex: B
Enter weight: 2

For Edge 2
Enter start vertex: B
Enter end vertex: C
Enter weight: 3

For Edge 3
Enter start vertex: C
Enter end vertex: D
Enter weight: 4

For Edge 4
Enter start vertex: D
Enter end vertex: A
Enter weight: 1

For Edge 5
Enter start vertex: B
Enter end vertex: D
Enter weight: 5

For Edge 6
Enter start vertex: A
Enter end vertex: C
Enter weight: 3

Minimum Spanning Tree:
A --> D :  1
A --> B :  2
A --> C :  3
Total Cost: 6

"""
"""
Kruskal's Algorithm:
Kruskal's algorithm is a greedy algorithm that finds a minimum spanning tree for a connected, undirected graph. It works by sorting the edges by their weights and adding the edges to the MST one by one, ensuring that no cycles are formed.

Components of the Code:
find Function:
This function implements the find operation of the disjoint-set data structure. It recursively finds the root of the set to which a particular element belongs.
union Function:
This function implements the union operation of the disjoint-set data structure. It merges two sets by attaching the root of one set to the root of the other set.
kruskals_algorithm Function:
It takes the graph (graph representation) as input.
It initializes minimum_spanning_tree to store the edges of the MST and edges to store all the edges of the graph.
It sorts the edges in non-decreasing order of their weights.
It iterates through the sorted edges, adding each edge to the MST if it doesn't form a cycle.
It returns the minimum spanning tree.
Graph Representation:
The graph dictionary represents the graph, where keys are vertices, and values are lists of tuples (neighbor, weight) representing adjacent vertices and their corresponding edge weights.
User Input:
The code prompts the user to input the number of edges and details for each edge (start vertex, end vertex, and weight).
It constructs the graph based on the user input.
Main Logic:
The code applies Kruskal's algorithm to find the minimum spanning tree.
It calculates the total cost of the MST by summing up the weights of all the edges in the MST.
It prints the edges of the minimum spanning tree along with the total cost.

"""
