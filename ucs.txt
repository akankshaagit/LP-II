import heapq

def uniform_cost_search(graph, start, goal):
    # Create a priority queue to store vertices to visit
    queue = [(0, start, [start])]  # (cost, vertex, path)
    visited = set()  # Set to store visited vertices

    while queue:
        cost, vertex, path = heapq.heappop(queue)

        if vertex == goal:
            # Goal vertex reached, return the path and cost
            return path, cost

        if vertex not in visited:
            visited.add(vertex)

            # Expand the current vertex by considering its neighbors
            for neighbor, edge_cost in graph[vertex]:
                if neighbor not in visited:
                    new_cost = cost + edge_cost
                    new_path = path + [neighbor]
                    heapq.heappush(queue, (new_cost, neighbor, new_path))

    # Goal vertex not reachable from the start vertex
    return None


# Accept graph from the user
graph = {}

num_edges = int(input("Enter the number of edges: "))

for i in range(num_edges):
    print("\nFor Edge", i + 1)
    src = input("Enter start vertex: ")
    dest = input("Enter end vertex: ")
    cost = float(input("Enter edge cost: "))

    # Add vertices to the graph if they don't exist
    if src not in graph:
        graph[src] = []
    if dest not in graph:
        graph[dest] = []

    graph[src].append((dest, cost))
    graph[dest].append((src, cost))

start_vertex = input("Enter the start vertex: ")
goal_vertex = input("Enter the goal vertex: ")

# Find the shortest path and its cost from the start to the goal
shortest_path, shortest_cost = uniform_cost_search(graph, start_vertex, goal_vertex)

if shortest_path is not None:
    print(f"The shortest path from {start_vertex} to {goal_vertex} is: {shortest_path}")
    print(f"The shortest path cost is: {shortest_cost}")
else:
    print(f"There is no path from {start_vertex} to {goal_vertex}")


"""
Enter the number of edges: 4

For Edge 1
Enter start vertex: A
Enter end vertex: B
Enter edge cost: 2

For Edge 2
Enter start vertex: B
Enter end vertex: C
Enter edge cost: 4

For Edge 3
Enter start vertex: C
Enter end vertex: D
Enter edge cost: 8

For Edge 4
Enter start vertex: A
Enter end vertex: D
Enter edge cost: 1
Enter the start vertex: A
Enter the goal vertex: D
The shortest path from A to D is: ['A', 'D']
The shortest path cost is: 1.0

"""
"""
Uniform Cost Search (UCS):
UCS is a variant of Dijkstra's algorithm that explores paths in increasing order of cost. It guarantees finding the shortest path in terms of edge weights from the start vertex to all other vertices.

Components of the Code:
uniform_cost_search Function:
It takes the graph (graph representation), start (start vertex), and goal (goal vertex) as inputs.
It initializes a priority queue queue to store vertices to visit, with the initial entry containing the start vertex and its cost.
It iteratively explores vertices from the priority queue until the goal vertex is reached or all vertices are visited.
It returns the shortest path and its cost if the goal vertex is reached.
Graph Representation:
The graph dictionary represents the graph, where keys are vertices, and values are lists of tuples (neighbor, edge_cost) representing adjacent vertices and their corresponding edge costs.
User Input:
The code prompts the user to input the number of edges and details for each edge (start vertex, end vertex, and edge cost).
It constructs the graph based on the user input.
Main Logic:
The code finds the shortest path and its cost from the start vertex to the goal vertex using uniform cost search.
It prints the shortest path and its cost if a path exists; otherwise, it indicates that there is no path between the given vertices.

"""
